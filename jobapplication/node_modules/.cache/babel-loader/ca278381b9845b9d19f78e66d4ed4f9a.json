{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dbouk\\\\Desktop\\\\University\\\\AGL\\\\JobPortalApp\\\\jobapplication\\\\src\\\\components\\\\Search\\\\TableSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport MaterialTable from 'material-table';\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow);\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700\n  }\n});\n\nconst TableSearch = () => {\n  _s();\n\n  const [jobs, setJobs] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  const getJobs = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3001/jobs\");\n      const jsonData = await response.json();\n      setJobs(jsonData);\n      console.log(jsonData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getJobs();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-search\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Job Title Here\",\n      onChange: e => {\n        setSearch(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search Jobs Here ! Hope You find Your Dream Job!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), jobs.filter(item => {\n      if (search == \"\") {\n        return item;\n      } else if (item.job_title.toLowerCase().includes(search.toLowerCase())) {\n        return item;\n      }\n    }).map(item => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [item.job_title, \" = \", item.comp_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 24\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TableSearch, \"aBz2L4YbIIG0n0LSMT8vQQeFR+Y=\");\n\n_c = TableSearch;\nexport default TableSearch;\n/*<MaterialTable title=\"JobsSearched\"\r\n            \r\n            />*/\n\nvar _c;\n\n$RefreshReg$(_c, \"TableSearch\");","map":{"version":3,"sources":["C:/Users/dbouk/Desktop/University/AGL/JobPortalApp/jobapplication/src/components/Search/TableSearch.js"],"names":["React","Fragment","useEffect","useState","MaterialTable","withStyles","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","StyledTableRow","root","action","hover","useStyles","table","minWidth","TableSearch","jobs","setJobs","search","setSearch","getJobs","response","fetch","jsonData","json","console","log","err","error","message","e","target","value","filter","item","job_title","toLowerCase","includes","map","comp_name"],"mappings":"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","sourcesContent":["import React , {Fragment , useEffect , useState} from \"react\";\r\nimport MaterialTable from 'material-table';\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n  \r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n  \r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n  });\r\n\r\n\r\n\r\n const TableSearch = () => {\r\n\r\n    const [jobs , setJobs] = useState([]);\r\n    const [search , setSearch] = useState(\"\");\r\n\r\n    const getJobs = async () => {\r\n        try {\r\n\r\n            const response = await fetch(\"http://localhost:3001/jobs\");\r\n            const jsonData = await response.json();\r\n\r\n            setJobs(jsonData);\r\n            console.log(jsonData);\r\n            \r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    };\r\n    useEffect(() =>{\r\n        getJobs();\r\n    }, []);\r\n\r\n    return(\r\n        <div className=\"table-search\">\r\n            <input \r\n            type=\"text\" \r\n            placeholder=\"Job Title Here\"\r\n            onChange={e => {\r\n                setSearch(e.target.value);\r\n\r\n            }}\r\n\r\n            \r\n            />\r\n            <h1>Search Jobs Here ! Hope You find Your Dream Job!</h1>\r\n            {jobs.filter(item => {\r\n                if (search == \"\") {\r\n                    return item\r\n                }\r\n                else if (item.job_title.toLowerCase().includes(search.toLowerCase())){\r\n                    return item;\r\n                }\r\n\r\n\r\n            }).\r\n            map(item => {\r\n                return <p>{item.job_title} = {item.comp_name}</p>\r\n            })}           \r\n        </div>\r\n\r\n\r\n    )\r\n\r\n    \r\n};\r\nexport default TableSearch;\r\n\r\n/*<MaterialTable title=\"JobsSearched\"\r\n            \r\n            />*/"]},"metadata":{},"sourceType":"module"}